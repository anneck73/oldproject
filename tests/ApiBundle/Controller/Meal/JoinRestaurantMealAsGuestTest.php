<?php
/**
 * Created by PhpStorm.
 * User: markus
 * Date: 28.12.18
 * Time: 08:17
 */

namespace Mealmatch\ApiBundle\Controller\Meal;

use Doctrine\ORM\EntityManager;
use Mealmatch\ApiBundle\ApiConstants;
use Mealmatch\ApiBundle\Entity\Meal\MealEvent;
use Mealmatch\ApiBundle\Entity\Meal\MealOffer;
use Mealmatch\ApiBundle\Entity\Meal\ProMeal;
use Mealmatch\ApiBundle\MealMatch\UserManager;
use MMUserBundle\Entity\MMUser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DomCrawler\Crawler;
use Symfony\Component\HttpKernel\Client;


class JoinRestaurantMealAsGuestTest extends WebTestCase
{
    /** @var Client */
    private $client;

    /** @var ContainerInterface */
    private $container;

    /** @var EntityManager */
    private $entityManager;

    private $mealId;

    private $mealOfferId;

    /**
     * @todo: Finish PHPDoc!
     * A summary informing the user what the associated element does.
     *
     * A *description*, that can span multiple lines, to go _in-depth_ into the details of this element
     * and to provide some background information or textual references.
     */
    public function setUp()
    {
        $this->client = static::createClient(array(), array(
            'PHP_AUTH_USER' => 'MMTestGuest',
            'PHP_AUTH_PW' => 'MMTest',
        ));

        $this->container = $this->client->getContainer();
        $this->entityManager = $this->container->get('doctrine.orm.entity_manager');

        /** @var UserManager $userManager */
        $userManager = $this->container->get('api.user_manager');

        /** @var MMUser $mmTestHost */
        $mmTestHost = $userManager->findUserByUsername('MMTestRestaurant');

        // Generate DB entries
        $mealOffer = $this->setupMealOffer();
        $mealEvent = $this->setupMealEvent();

        $proMealEntity = $this->setupProMealEntity($mmTestHost, $mealOffer, $mealEvent);

        $this->mealOfferId = $mealOffer->getId();
        $this->mealId = $proMealEntity->getId();


    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @return Crawler
     */
    public function testIndexAction()
    {
        $crawler = $this->client->request('GET', '/');

        $this->assertTrue(
            $this->client->getResponse()->isSuccessful(),
            'Startpage loading failed: ' . $this->client->getResponse()->getStatusCode()
        );
        $this->assertGreaterThan(0, $crawler->filter('html:contains("Suche interessante Meals in deiner Stadt")')->count());
    }


    public function testJoinAction()
    {
        $crawler = $this->client->request('GET', '/');

        $this->assertTrue(
            $this->client->getResponse()->isSuccessful(),
            'Startpage loading failed: ' . $this->client->getResponse()->getStatusCode()
        );
        $this->assertGreaterThan(0, $crawler->filter('html:contains("Suche interessante Meals in deiner Stadt")')->count());

        $form = $crawler->selectButton('Meal suchen')->form();
        $form['searchLocation'] = 'Köln';

        $crawler = $this->client->submit($form);

        $this->assertTrue(
            $this->client->getResponse()->isSuccessful(),
            'Loading page after submit failed: ' . $this->client->getResponse()->getStatusCode(),
            $this->client->getResponse()->getContent()
        );
        $this->assertGreaterThan(0, $crawler->filter('html:contains("JoinRestaurantMealAsGuestTest Table Topic")')->count());

        $crawler = $this->client->request('GET', '/api/mealticket/'. $this->mealId . '/' . $this->mealOfferId . '/createTicket');

        $this->assertTrue(
            $this->client->getResponse()->isRedirect(),
            '/api/mealticket/MEALID/MEALOFFERID/createTicket/ is no redirect: ' . $this->client->getResponse()->getStatusCode(),
            $this->client->getResponse()->getContent()
        );

        $crawler = $this->client->followRedirect();

        $this->assertTrue(
            $this->client->getResponse()->isSuccessful(),
            'Following redirect failed: ' . $this->client->getResponse()->getStatusCode(),
            $this->client->getResponse()->getContent()
        );

        $this->assertGreaterThan(0, $crawler->filter('html:contains("JoinRestaurantMealAsGuestTest")')->count());

        // Get the MEalticket Id
        $mealTicketId = preg_replace('![^0-9]!', '', $crawler->getUri());

        // Paying the Mealticket
        $crawler = $this->client->request('GET', '/api/workflow/doTransition/Ticket/' . $mealTicketId . '/pay_ticket');


        $this->assertTrue(
            $this->client->getResponse()->isRedirect(),
            '/api/workflow/doTransition/Ticket/MEALTICKETID/pay_ticket is no redirect: ' . $this->client->getResponse()->getStatusCode(),
            $this->client->getResponse()->getContent());

        $crawler = $this->client->followRedirect();

        $this->assertTrue(
            $this->client->getResponse()->isSuccessful(),
            'Following redirect failed: ' . $this->client->getResponse()->getStatusCode(),
            $this->client->getResponse()->getContent()
        );


        $this->assertGreaterThan(0, $crawler->filter('html:contains("JoinRestaurantMealAsGuestTest")')->count());

        // Verify that guest is in mealticket
        $this->assertGreaterThan(0, $crawler->filter('html:contains("Gast: TESTUSER, MMGuest")')->count());

        $this->client = static::createClient(array(), array(
            'PHP_AUTH_USER' => 'MMTestRestaurant',
            'PHP_AUTH_PW' => 'MMTest',
        ));

        $crawler = $this->client->request('GET', '/');

        $this->assertTrue(
            $this->client->getResponse()->isSuccessful(),
            'Startpage loading failed: ' . $this->client->getResponse()->getStatusCode()
        );
        $this->assertGreaterThan(0, $crawler->filter('html:contains("Suche interessante Meals in deiner Stadt")')->count());


        $link = $crawler->selectLink('Meine Meals')->link();
        $this->client->click($link);

        $this->assertTrue(
            $this->client->getResponse()->isSuccessful(),
            'Following link failed: ' . $this->client->getResponse()->getStatusCode(),
            $this->client->getResponse()->getContent()
        );

        $crawler = $this->client->request('GET', '/api/promeal/manager/'.$this->mealId.'/show');

        $this->assertTrue(
            $this->client->getResponse()->isSuccessful(),
            '/api/promeal/manager/MEALID/show loading failed: ' . $this->client->getResponse()->getStatusCode(),
            $this->client->getResponse()->getContent()
        );


        // Verify that guest is in restaurants /api/promeal/manager/'.$mealId.'/show
        $link = $crawler->filter('#home-meal-card-'.$this->mealId.' > section > div:nth-child(6) > div.flexbox-centering.grid-half > div > a')->link();

        $this->assertRegExp('~MMTestGuest~', $link->getUri());
    }

    /**
     * @return MealOffer
     */
    private function setupMealOffer(): MealOffer
    {
        $mealOffer = new MealOffer();
        $mealOffer->setName('Mealoffer name');
        $mealOffer->setDescription('A RestaurantMeal to test joining');
        $mealOffer->setAvailableAmount(10);
        $mealOffer->setPrice(0.50);
        $mealOffer->setCurrency('EUR');

        return $mealOffer;
    }

    /**
     * @return MealEvent
     * @throws \Exception
     */
    private function setupMealEvent(): MealEvent
    {
        $mealEvent = new MealEvent();
        $mealEvent->setStartDateTime(new \DateTime('+2 days'));
        $mealEvent->setEndDateTime(new \DateTime('+3 hours'));

        return $mealEvent;
    }

    /**
     * @param MMUser    $mmTestHost
     * @param MealOffer $mealOffer
     * @param MealEvent $mealEvent
     * @return ProMeal
     * @throws \Doctrine\ORM\OptimisticLockException
     * @throws \Mealmatch\ApiBundle\Exceptions\ServiceDataException
     */
    private function setupProMealEntity(MMUser $mmTestHost, MealOffer $mealOffer, MealEvent $mealEvent ): ProMeal
    {
        $this->container = $this->client->getContainer();
        $this->entityManager = $this->container->get('doctrine.orm.entity_manager');

        $proMealEntity = new ProMeal();
        $proMealEntity->setMaxNumberOfGuest(10);
        $proMealEntity->setTitle('JoinRestaurantMealAsGuestTest Titel ...');
        $proMealEntity->setDescription('JoinRestaurantMealAsGuestTest Lauftext ...');
        $proMealEntity->setTableTopic('JoinRestaurantMealAsGuestTest Table Topic');
        $proMealEntity->setHost($mmTestHost);
        $proMealEntity->setSharedCost(10);
//        $proMealEntity->setStartDateTime(new \DateTime('+2 days'));
        $proMealEntity->setSharedCostCurrency('EUR');
        $proMealEntity->setStatus(ApiConstants::MEAL_STATUS_RUNNING);

        $geoAddressService = $this->container->get('api.geo_address.service');
        $serviceData = $geoAddressService->createMealAddressByLocation('Luxemburger Str. 256, 50937 Köln');
        $mealAddress = $serviceData->getMealAddress();
        $proMealEntity->addMealAddress($mealAddress);

        $proMealEntity->addMealOffer($mealOffer);
        $proMealEntity->addMealEvent($mealEvent);

        $category = $this->entityManager->getRepository('ApiBundle:Meal\BaseMealCategory')->findAll()[0];
        $proMealEntity->addCategory($category);

        $serviceData = $this->container->get('api.pro_meal.service')->createFromEntity($proMealEntity);
        $createdRootProMeal = $serviceData->getProMeal();
        $this->container->get('api.meal.service')
            ->createAllProMealEvents($createdRootProMeal, ApiConstants::MEAL_STATUS_RUNNING);

        return $proMealEntity;
    }
}
