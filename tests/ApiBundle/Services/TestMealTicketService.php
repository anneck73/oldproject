<?php
/**
 * Copyright 2016-2017 MealMatch UG
 *
 * Author: Wizard <wizard@mealmatch.de>
 * Created: 12.12.17 10:41
 */

namespace Tests\ApiBundle\Services;

use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\OptimisticLockException;
use Mealmatch\ApiBundle\Entity\Meal\BaseMealTicket;
use Mealmatch\ApiBundle\Entity\Meal\HomeMeal;
use Mealmatch\ApiBundle\Entity\Meal\MealOffer;
use Mealmatch\ApiBundle\Entity\Meal\ProMeal;
use Mealmatch\ApiBundle\Exceptions\MealTicketException;
use Mealmatch\ApiBundle\MealMatch\UserManager;
use Mealmatch\ApiBundle\Services\MealTicketService;
use Mealmatch\ApiBundle\Services\ProMealService;
use Mealmatch\MealmatchKernelTestCase;
use MMUserBundle\Entity\MMUser;

class TestMealTicketService extends MealmatchKernelTestCase
{

    /** @var MealTicketService $mealTicketService */
    private $mealTicketService;

    /** @var UserManager $userManager */
    private $userManager;

    /** @var ProMealService $proMealService */
    private $proMealService;

    /** @var ProMeal $proMeal */
    private $proMeal;

    /** @var HomeMeal $homeMeal */
    private $homeMeal;

    /** @var MMUser $guest */
    private $guest;

    /** @var MealOffer $mealOffer */
    private $mealOffer;

    protected function setUp()
    {
        parent::setUp();
        $this->mealTicketService = static::$kernel->getContainer()
            ->get('api.meal_ticket.service');

        $this->userManager = static::$kernel->getContainer()
            ->get('api.user_manager');

        $this->proMealService = static::$kernel->getContainer()
            ->get('api.pro_meal.service');

        $this->guest = $this->userManager->getMealmatchUser('MMTestGuest');

        $this->proMeal = $this->em->getRepository('ApiBundle:Meal\ProMeal')->findBy(array('leaf'=>1))[0];

        $this->homeMeal = $this->em->getRepository('ApiBundle:Meal\HomeMeal')->findBy(array('leaf'=>1))[0];

        $this->mealOffer = $this->proMeal->getMealOffers()->first();

    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function testHasProMealTicket()
    {

        try {
            /** @var BaseMealTicket $newMealTicket */
            $newMealTicket = $this->mealTicketService->createNewFromProMeal(
                $this->proMeal,
                $this->mealOffer,
                $this->guest
            );

            $ticketFound = $this->mealTicketService->hasProMealTicket($this->guest, $this->proMeal, $this->mealOffer);

            $this->assertTrue($ticketFound, 'MealTicket not found!');

            $existingMealTicket = $this->mealTicketService->getProMealTicket($this->guest, $this->proMeal, $this->mealOffer);

            $this->assertEquals($existingMealTicket->getId(), $newMealTicket->getId(), 'ID\'s should be equal');

            $this->mealTicketService->delete($existingMealTicket);

        } catch (OptimisticLockException $optimisticLockException) {
            $this->fail($optimisticLockException->getMessage());
        }

    }

    public function testHasHomeMealTicket()
    {
        try {
            /** @var BaseMealTicket $newMealTicket */
            $newMealTicket = $this->mealTicketService->createNewFromHomeMeal(
                $this->homeMeal,
                $this->guest
            );

            $ticketFound = $this->mealTicketService->hasHomeMealTicketFrom($this->guest, $this->homeMeal);

            $this->assertTrue($ticketFound, 'MealTicket not found!');

            $existingMealTicket = $this->mealTicketService->getHomeMealTicket($this->guest, $this->homeMeal);

            $this->assertEquals($existingMealTicket->getId(), $newMealTicket->getId(), 'ID\'s should be equal');

            $this->mealTicketService->delete($existingMealTicket);

        } catch (OptimisticLockException $optimisticLockException) {
            $this->fail($optimisticLockException->getMessage());
        }

    }

    public function testRestorePositive()
    {
        try {
            /** @var BaseMealTicket $newMealTicket */
            $newMealTicket = $this->mealTicketService->createNewFromHomeMeal(
                $this->homeMeal,
                $this->guest
            );

            $restoredMealTicket = $this->mealTicketService->restore($newMealTicket->getId());
            $this->assertEquals($restoredMealTicket->getId(), $newMealTicket->getId(), 'ID\'s should be equal');

            $this->mealTicketService->delete($newMealTicket);

        } catch (OptimisticLockException $optimisticLockException) {
            $this->fail($optimisticLockException->getMessage());
        } catch (MealTicketException $mealTicketException) {
            $this->fail($mealTicketException->getMessage());
        }

    }

    public function testRestoreNegative()
    {
        $this->expectException('Mealmatch\ApiBundle\Exceptions\MealTicketException');
        $this->mealTicketService->restore(-1);

    }

    public function testUpdate()
    {
        try {
            /** @var BaseMealTicket $newMealTicket */
            $newMealTicket = $this->mealTicketService->createNewFromHomeMeal(
                $this->homeMeal,
                $this->guest
            );

            $newMealTicket->setDescription('Updated Description');
            $updatedMealTicket = $this->mealTicketService->update($newMealTicket);
            $this->assertEquals('Updated Description', $updatedMealTicket->getDescription(),
                'Entity has not been updated?!?');

            $this->mealTicketService->delete($newMealTicket);

        } catch (OptimisticLockException $optimisticLockException) {
            $this->fail($optimisticLockException->getMessage());
        } catch (MealTicketException $mealTicketException) {
            $this->fail($mealTicketException->getMessage());
        }
    }

    public function testFindOrCreateNewFromHomeMeal()
    {

        try {
            $foundOrNewMealTicket = $this->mealTicketService->findOrCreateNewFromHomeMeal(
                $this->homeMeal,
                $this->guest
            );
            $this->assertNotNull($foundOrNewMealTicket, 'NULL returned!!!!');
            $this->mealTicketService->delete($foundOrNewMealTicket);
        } catch (MealTicketException $mealTicketException) {
            $this->fail($mealTicketException->getMessage());
        } catch (OptimisticLockException $optimisticLockException) {
            $this->fail($optimisticLockException);
        }

    }

    public function testFindOrCreateNewFromProMeal()
    {
        try {
            $foundOrNewMealTicket = $this->mealTicketService->findOrCreateNewFromProMeal($this->proMeal, $this->mealOffer, $this->guest);
            $this->assertNotNull($foundOrNewMealTicket, 'NULL returned!!!!');
            $this->mealTicketService->delete($foundOrNewMealTicket);
        } catch (MealTicketException $mealTicketException) {
            $this->fail($mealTicketException->getMessage());
        } catch (OptimisticLockException $optimisticLockException) {
            $this->fail($optimisticLockException);
        }

    }

    public function testValidateOwnership()
    {
        try {

            $this->login($this->guest->getUsername());

            /** @var BaseMealTicket $newMealTicket */
            $newMealTicket = $this->mealTicketService->createNewFromHomeMeal(
                $this->homeMeal,
                $this->guest
            );

            $isOwner = $this->mealTicketService->validateOwnership($newMealTicket, $this->guest);

            $this->assertTrue($isOwner, 'Ownership validation failed!!!');

            $this->mealTicketService->delete($newMealTicket);

        } catch (MealTicketException $mealTicketException) {
            $this->fail($mealTicketException->getMessage());
        } catch (OptimisticLockException $optimisticLockException) {
            $this->fail($optimisticLockException->getMessage());
        }
    }

    public function testGetPaymentTries()
    {
        try {

            /** @var BaseMealTicket $newMealTicket */
            $newMealTicket = $this->mealTicketService->createNewFromHomeMeal(
                $this->homeMeal,
                $this->guest
            );
            $pTries = $this->mealTicketService->getPaymentTries($newMealTicket);
            $this->assertEquals(0, $pTries,
            'Should be 0 Payment tries, but was: ' . $pTries);

            $this->mealTicketService->delete($newMealTicket);

        } catch (MealTicketException $mealTicketException) {
            $this->fail($mealTicketException->getMessage());
        } catch (OptimisticLockException $optimisticLockException) {
            $this->fail($optimisticLockException->getMessage());
        }

    }

    public function testFindByMealAndUser()
    {
        static::markTestSkipped('So funktioniert das nicht ... Die Suchabfrage findet zu viele Tickets!');
        try {
            /** @var BaseMealTicket $newMealTicket */
            $newMealTicket = $this->mealTicketService->createNewFromHomeMeal(
                $this->homeMeal,
                $this->guest
            );

            $this->mealTicketService->findOneByMealAndUser($this->homeMeal, $this->guest);

            $this->mealTicketService->delete($newMealTicket);

        } catch (OptimisticLockException $optimisticLockException) {
            $this->fail($optimisticLockException->getMessage());
        } catch (NoResultException $noResultException) {
            $this->fail($noResultException->getMessage());
        } catch (NonUniqueResultException $nonUniqueResultException) {
            $this->fail($nonUniqueResultException->getMessage());
        }

    }

    public function testCreateNewFromHomeMeal()
    {
        try {
            /** @var BaseMealTicket $newMealTicket */
            $newMealTicket = $this->mealTicketService->createNewFromHomeMeal(
                $this->homeMeal,
                $this->guest
            );

            // The ticket price is from the choosen home meal->sharedCosts.
            $this->assertEquals($this->homeMeal->getSharedCost(), $newMealTicket->getPrice(),
                'MealTicket Price does not equal HomeMeal:sharedCosts!');


            $this->mealTicketService->delete($newMealTicket);

        } catch (OptimisticLockException $optimisticLockException) {
            $this->fail($optimisticLockException->getMessage());
        }

    }

    public function testCreateNewFromProMeal()
    {
        try {
            /** @var BaseMealTicket $newMealTicket */
            $newMealTicket = $this->mealTicketService->createNewFromProMeal(
                $this->proMeal,
                $this->mealOffer,
                $this->guest
            );

            // The ticket price is from the selected mealOffer.
            $this->assertEquals($this->mealOffer->getPrice(), $newMealTicket->getPrice(),
                'MealTicket Price does not equal MealOffer Price!');

            $this->mealTicketService->delete($newMealTicket);

        } catch (OptimisticLockException $optimisticLockException) {
            $this->fail($optimisticLockException->getMessage());
        }

    }
}
