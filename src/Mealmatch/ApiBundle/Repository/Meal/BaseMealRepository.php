<?php

/*
 * Copyright (c) 2016-2018. Mealmatch GmbH
 * (c) AndrÃ© Anneck <andre.anneck@mealmatch.de>
 * Mealmatch WebApp v0.2
 */

namespace Mealmatch\ApiBundle\Repository\Meal;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Mealmatch\ApiBundle\ApiConstants;
use MMUserBundle\Entity\MMUser;

/**
 * BaseMealRepository.
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class BaseMealRepository extends EntityRepository
{
    /**
     * @todo: Finish PHPDoc!
     * A summary informing the user what the associated element does.
     *
     * A *description*, that can span multiple lines, to go _in-depth_ into the details of this element
     * and to provide some background information or textual references.
     *
     * @param string $myArgument with a *description* of this argument, these may also
     *                           span multiple lines
     *
     * @return array
     */
    public function findByAvailableDates()
    {
        return parent::findAll(); // TODO: Change the autogenerated stub
    }

    /**
     * @todo: Finish PHPDoc!
     * A summary informing the user what the associated element does.
     *
     * A *description*, that can span multiple lines, to go _in-depth_ into the details of this element
     * and to provide some background information or textual references.
     *
     * @param string $myArgument with a *description* of this argument, these may also
     *                           span multiple lines
     *
     * @return ArrayCollection
     */
    public function findOutdated(): ArrayCollection
    {
        $yesterday = (new \DateTime('-1 day'))->format('Y-m-d 00:00:00');
        $queryBuilder = $this->createQueryBuilder('baseMeal');
        $queryBuilder->addSelect('baseMeal')
            ->leftJoin('baseMeal.mealEvents', 'mealEvents')
            ->andWhere('mealEvents.startDateTime < :yesterday')
            ->andWhere('baseMeal.status = :status')
            ->setParameter('yesterday', $yesterday)
            ->setParameter('status', ApiConstants::MEAL_STATUS_RUNNING);

        $result = $queryBuilder->getQuery()->getResult();

        return new ArrayCollection($result);
    }

    public function findJoinedMealsByUserAccount(MMUser $userAccount): ArrayCollection
    {
        // @todo: wont work ... but why?
        $queryBuilder = $this->createQueryBuilder('baseMeal');
        $queryBuilder->addSelect('baseMeal')
                     ->andWhere(':useraccount MEMBER OF baseMeal.guests')
                     ->andWhere('baseMeal.status = :status')
                     ->andWhere('baseMeal.leaf = 1')
                     ->setParameter('useraccount', $userAccount->getId())
                     ->setParameter('status', ApiConstants::MEAL_STATUS_RUNNING);

        $result = $queryBuilder->getQuery()->getResult();

        return new ArrayCollection($result);
    }
}
