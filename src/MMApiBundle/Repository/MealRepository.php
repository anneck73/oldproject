<?php

/*
 * Copyright (c) 2016-2018. Mealmatch GmbH
 * (c) AndrÃ© Anneck <andre.anneck@mealmatch.de>
 * Mealmatch WebApp v0.2
 */

namespace MMApiBundle\Repository;

use DateTime;
use MMApiBundle\Entity\Meal;

/**
 * MealRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MealRepository extends \Doctrine\ORM\EntityRepository
{
    const SELECT_ALL_MEALS =
        'SELECT m from MMApiBundle:Meal m';

    /**
     * @todo: Finish PHPDoc!
     * Queries using ->setMaxResults($max) and ->setFirstResult($start) and returns them.
     *
     * A *description*, that can span multiple lines, to go _in-depth_ into the details of this element
     * and to provide some background information or textual references.
     *
     * @param int    $start
     * @param int    $max
     * @param string $myArgument with a *description* of this argument, these may also
     *                           span multiple lines
     */
    public function findByAllLimited($start = 0, $max = 1)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery(static::SELECT_ALL_MEALS)
            ->setFirstResult($start)
            ->setMaxResults($max);

        $meals = $query->getArrayResult();

        return $meals;
    }

    /**
     * @todo: Finish PHPDoc!
     * A summary informing the user what the associated element does.
     *
     * A *description*, that can span multiple lines, to go _in-depth_ into the details of this element
     * and to provide some background information or textual references.
     *
     * @param string $pLocationAddress
     *
     * @return array
     */
    public function findByLocationAddress(string $pLocationAddress)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $queryBuilder->join('m.address', 'a');
        $queryBuilder->andWhere('a.locationAddress LIKE :loc');
        $queryBuilder->setParameter('loc', $pLocationAddress);

        return $queryBuilder->getQuery()->getResult();
    }

    public function findByStartdate(DateTime $pStartDate)
    {
        $queryBuilder = $this->createQueryBuilder('meal');
        $queryBuilder->where('meal.startDateTime < :pDate');
        $queryBuilder->andWhere('meal.status = :status');
        $queryBuilder->setParameter('pDate', $pStartDate);
        $queryBuilder->setParameter('status', Meal::$STATUS_RUNNING);

        return $queryBuilder->getQuery()->getResult();
    }

    public function findByTitle(string $pTitle)
    {
        $queryBuilder = $this->createQueryBuilder('meal');
        $queryBuilder->where('meal.title = :title');
        $queryBuilder->andWhere('meal.status = :status');
        $queryBuilder->setParameter('title', $pTitle);
        $queryBuilder->setParameter('status', Meal::$STATUS_RUNNING);

        return $queryBuilder->getQuery()->getResult();
    }
}
